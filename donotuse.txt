export const generatePdf = (elementId) => {
  const input = document.getElementById(elementId);
  html2canvas(input).then((canvas) => {
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = canvas.height * imgWidth / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save('page.pdf');
  });
//===============================================================================================================================================================
import React, { useEffect } from "react";
import { Chart as ChartJS, registerables } from "chart.js";
import { ColorBlindnessDevtool } from "@color-blindness-devtool/react";
import { CategoryScale } from "chart.js";
import { removeGithubLink } from "./removeGithubLink";
import { adjustTooltipPosition } from "./adjustTooltipPosition";
import "./ColorblindMode.css"; // Import custom CSS

ChartJS.register(...registerables, CategoryScale);

const ColorblindMode: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  useEffect(() => {
    adjustTooltipPosition();
    removeGithubLink();
  }, []);

  return (
    <ColorBlindnessDevtool>
      <div id="chart-container">{children}</div>
    </ColorBlindnessDevtool>
  );
};

export default ColorblindMode;
//==============================================================================================================================================================
import React from "react";
import { Bar } from "react-chartjs-2";
import ColorblindMode from "./ColorblindMode";

const data = {
  labels: ["January", "February", "March", "April", "May", "June", "July"],
  datasets: [
    {
      label: "Dataset 1",
      data: [65, 59, 80, 81, 56, 55, 40],
      backgroundColor: "#E74C3C",
      borderColor: "#C0392B",
      borderWidth: 1,
    },
    {
      label: "Dataset 2",
      data: [45, 39, 60, 61, 46, 35, 20],
      backgroundColor: "#3498DB",
      borderColor: "#2980B9",
      borderWidth: 1,
    },
    {
      label: "Dataset 3",
      data: [75, 69, 90, 91, 66, 65, 50],
      backgroundColor: "#2ECC71",
      borderColor: "#27AE60",
      borderWidth: 1,
    },
  ],
};

const App: React.FC = () => {
  return (
    <ColorblindMode>
      <div>
        <h1 style={{ textAlign: "center" }}>Colorblind Mode Example</h1>
        <Bar
          data={data}
          options={{ responsive: true }}
          className="chart"
          id="chart1"
        />
      </div>
    </ColorblindMode>
  );
};

export default App;
//============================================================================================================================================================
export const removeGithubLink = () => {
    setTimeout(() => {
      const shadowRoot = document.querySelector('color-blindness-devtool')?.shadowRoot;
      if (shadowRoot) {
        const githubLink = shadowRoot.querySelector('.github-link');
        if (githubLink) {
          githubLink.remove();
        }
      }
    }, 1000); // Delay to ensure the shadow DOM is rendered
  };
//==========================================================Home Page DevEase==================================================================================
/*App.tsx*/
import React, { useState } from "react";
import ConfettiExplosion from "react-confetti-explosion";
import {
  Eye,
  Code,
  FileJson,
  FileCog,
  Sparkles,
  ArrowRight,
} from "lucide-react";
import "./App.css";
// import "./HomePage.scss";

interface UtilityCard {
  title: string;
  description: string;
  icon: React.ReactNode;
  url: string;
}

const utilityCards: UtilityCard[] = [
  {
    title: "JSON Visualizer",
    description:
      "Visualize your JSON data in a tree-like structure for easy navigation.",
    icon: <Eye className="h-6 w-6" />,
    url: "/json-visualizer",
  },
  {
    title: "JSON Parser",
    description:
      "Parse and validate your JSON data with detailed error reporting.",
    icon: <Code className="h-6 w-6" />,
    url: "/json-parser",
  },
  {
    title: "JSON to XML Converter",
    description:
      "Convert your JSON data to XML format with customizable options.",
    icon: <FileJson className="h-6 w-6" />,
    url: "/json-to-xml",
  },
  {
    title: "JSON Formatter",
    description:
      "Format and beautify your JSON data with customizable indentation.",
    icon: <FileCog className="h-6 w-6" />,
    url: "/json-formatter",
  },
  {
    title: "JSON Formatter2",
    description:
      "Format and beautify your JSON data with customizable indentation.",
    icon: <FileCog className="h-6 w-6" />,
    url: "/json-formatter2",
  },
];

export default function App() {
  const [isExploding, setIsExploding] = useState(false);

  const handleCardClick = (url: string) => {
    window.location.href = url;
  };

  const handleExplode = () => {
    setIsExploding(true);
    setTimeout(() => setIsExploding(false), 5000); // Reset after 5 seconds
  };

  return (
    <div className="home-page">
      {isExploding && (
        <div className="confetti-container">
          <ConfettiExplosion
            force={0.8}
            duration={5000}
            particleCount={300}
            width={1800}
            colors={[
              "#ff0000",
              "#00ff00",
              "#0000ff",
              "#ffff00",
              "#00ffff",
              "#ff00ff",
            ]}
          />
        </div>
      )}
      <div className="content">
        <h1>Welcome to DevWHZ JSON Utilities</h1>
        <div className="explode-button-container">
          <button onClick={handleExplode} className="explode-button">
            <Sparkles className="h-5 w-5" />
            Explode!
          </button>
        </div>
        <div className="card-grid">
          {utilityCards.map((card, index) => (
            <div
              key={index}
              className="card"
              onClick={() => handleCardClick(card.url)}
            >
              <div className="card-header">
                <div className="card-title">
                  {card.icon}
                  {card.title}
                </div>
              </div>
              <div className="card-content">
                <p className="card-description">{card.description}</p>
              </div>
              <div className="card-footer">
                <button className="try-now-button">
                  Try Now
                  <ArrowRight className="h-4 w-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
//===================================================Home Page css =========================================================================================
.home-page {
  min-height: 100vh;
  background-image: linear-gradient(to bottom right, #d9e4dd, #fef8e6);
  /* background-image: linear-gradient(to bottom right, #dbeafe, #e0e7ff); */
  padding: 3rem 1rem;
  position: relative;
  overflow: hidden;
}

@media (min-width: 640px) {
  .home-page {
    padding: 3rem 1.5rem;
  }
}

@media (min-width: 1024px) {
  .home-page {
    padding: 3rem 2rem;
  }
}

.confetti-container {
  position: fixed;
  inset: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;
  z-index: 50;
}

.content {
  max-width: 80rem;
  margin: 0 auto;
  position: relative;
  z-index: 10;
}

h1 {
  font-size: 2.25rem;
  font-weight: bold;
  text-align: center;
  color: #111827;
  margin-bottom: 1.5rem;
}

.explode-button-container {
  text-align: center;
  margin-bottom: 3rem;
}

.explode-button {
  background-image: linear-gradient(to bottom right, #8b5cf6, #ec4899);
  color: #ffffff;
  font-weight: bold;
  padding: 0.5rem 1rem;
  border-radius: 9999px;
  box-shadow: 0 4px 6px rgba(218, 10, 10, 0.1);
  transition: all 0.3s;
  transition: transform 0.3s;
}

.explode-button:hover {
  transform: scale(1.05);
  background-image: linear-gradient(to bottom right, #7c3aed, #db2777);
}

.explode-button svg {
  display: inline-block;
  vertical-align: middle;
  margin-right: 0.5rem;
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  gap: 1.5rem;
}

@media (min-width: 640px) {
  .card-grid {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

@media (min-width: 1024px) {
  .card-grid {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

.card {
  background-color: #f7f7f7;
  border: 1px solid #e6e6e6;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s;
  cursor: pointer;
}

.card:hover {
  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
}

.card-header {
  padding: 1.5rem 1.5rem 0.75rem;
}

.card-title {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1.25rem;
  font-weight: bold;
}

.card-content {
  padding: 0 1.5rem 1.5rem;
}

.card-description {
  color: #6b7280;
}

.card-footer {
  padding: 1.5rem;
}

.try-now-button {
  width: 100%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  background-color: #3b82f6;
  color: #ffffff;
  font-weight: 500;
  border-radius: 0.375rem;
  transition: background-color 0.3s;
}

.try-now-button:hover {
  background-color: #2563eb;
}

.try-now-button svg {
  margin-left: 0.5rem;
}

////////////////////////////////////////////////////////// JSON PARSER //////////////////////////////////////////////////////////////////////
import React, { useState } from "react";
import "./App.css";

const App: React.FC = () => {
  const [input, setInput] = useState("");
  const [output, setOutput] = useState("");

  const handleParseJson = () => {
    try {
      const normalizedInput = input
        .replace(/\\"/g, '"')
        .replace(/\\n/g, "\n")
        .replace(/\\r/g, "\r")
        .replace(/\\t/g, "\t")
        .replace(/^"|"$/g, "");
      const parsed = JSON.parse(normalizedInput);
      setOutput(JSON.stringify(parsed, null, 2));
    } catch (error) {
      setOutput("Invalid JSON format");
    }
  };

  const handleClear = () => {
    setInput("");
    setOutput("");
  };

  return (
    <div className="container">
      <h1 className="title">JSON Parser</h1>
      <div className="content">
        <textarea
          className="text-area"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Enter JSON stringified input here"
        />
        <div className="buttons">
          <button className="parse-button" onClick={handleParseJson}>
            Parse JSON
          </button>
          <button className="clear-button" onClick={handleClear}>
            Clear
          </button>
        </div>
        <textarea
          className="text-area"
          value={output}
          readOnly
          placeholder="Parsed JSON output will appear here"
        />
      </div>
    </div>
  );
};

export default App;
/////////////////////////////////////////////////////// JSON PARSER CSS //////////////////////////////////////////////////////////////////////
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
}

.title {
  color: blue;
  margin-bottom: 20px;
}

.content {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
}

.text-area {
  width: 450px;
  height: 400px;
  margin: 0 20px;
}

.parse-button, .clear-button {
  padding: 10px 20px;
  cursor: pointer;
  color: white;
  border: none;
  border-radius: 5px;
  margin: 10px;
  box-sizing: border-box;
}

.parse-button {
  background-color: green;
}

.clear-button {
  background-color: rgb(236, 59, 59);
}

.buttons { 
display: flex; 
flex-direction: column; 
align-items: center; 
margin-bottom: 20px; 
}
////////////////////////////////////////////////// Proto buffers /////////////////////////////////////////////////////////////////
/// Server.js
const express = require("express");
const protobuf = require("protobufjs");
const cors = require("cors");
const app = express();
app.use(cors()); // Enable CORS for React app
// Load .proto file
protobuf.load("./user.proto", (err, root) => {
  if (err) throw err;
  const UserList = root.lookupType("UserList");
  // Generate 1000 users for the larger dataset
  const generateUserData = () => {
    const users = [];
    for (let i = 1; i <= 200000; i++) {
      users.push({
        id: `${i}`,
        name: `User ${i}`,
        email: `user${i}@example.com`,
        address: {
          street: `${i} Main St`,
          city: `${i} Anytown`,
          state: `CA ${i}`,
          zip: `${i}`,
        },
        phoneNumbers: [
          { type: "home", number: `123-456-78${i}` },
          { type: "mobile", number: `987-654-32${i}` },
        ],
      });
    }
    return users;
  };
  const userData = { users: generateUserData() };
  // API: Get JSON
  app.get("/json", (req, res) => {
    res.json(userData);
  });
  // API: Get Protobuf-encoded data
  app.get("/protobuf", (req, res) => {
    const buffer = UserList.encode({ users: userData.users }).finish();
    res.set("Content-Type", "application/octet-stream");
    res.send(buffer);
  });
  app.listen(3001, () =>
    console.log("Server running on http://localhost:3001")
  );
});
//---------------------------------------- ----------App.js (react App)
import  { useEffect, useState } from "react";
import protobuf from "protobufjs";

const App = () => {
  const [stats, setStats] = useState({
    json: { size: 0, fetchTime: 0, parseTime: 0 },
    protobuf: { size: 0, fetchTime: 0, parseTime: 0 },
  });

  useEffect(() => {
    const fetchAndCompare = async () => {
      // JSON Fetch & Stats
      const jsonStartTime = performance.now();
      const jsonResponse = await fetch("http://localhost:3001/json");
      const jsonFetchTime = performance.now() - jsonStartTime;
      const jsonData = await jsonResponse.json();
      const jsonParseTime = performance.now() - (jsonStartTime + jsonFetchTime);
      const jsonSize = new Blob([JSON.stringify(jsonData)]).size;

      // Protobuf Fetch & Stats
      const protoStartTime = performance.now();
      const protoResponse = await fetch("http://localhost:3001/protobuf");
      const protoFetchTime = performance.now() - protoStartTime;
      const protoBuffer = await protoResponse.arrayBuffer();
      const protoParseStartTime = performance.now();
      const root = await protobuf.load("/user.proto");
      const SomeMessage = root.lookupType("UserList");
      // eslint-disable-next-line no-unused-vars
      const protoData = SomeMessage.decode(new Uint8Array(protoBuffer));
      const protoParseTime = performance.now() - protoParseStartTime;
      const protoSize = protoBuffer.byteLength;

      // Update Stats
      setStats({
        json: { size: jsonSize, fetchTime: jsonFetchTime, parseTime: jsonParseTime },
        protobuf: { size: protoSize, fetchTime: protoFetchTime, parseTime: protoParseTime },
      });
    };

    fetchAndCompare();
  }, []);

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">JSON vs Protobuf: Performance Comparison</h1>

      <table className="table-auto border-collapse border border-gray-400 w-full">
        <thead>
          <tr>
            <th className="border border-gray-300 px-6 py-6">Metric</th>
            <th className="border border-gray-300 px-6 py-6">JSON</th>
            <th className="border border-gray-300 px-6 py-6">Protobuf</th>
            <th className="border border-gray-300 px-6 py-6">Better</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="border border-gray-300 px-6 py-4">Data Size (Bytes)</td>
            <td className="border border-gray-300 px-6 py-4">{stats.json.size} B</td>
            <td className="border border-gray-300 px-6 py-4">{stats.protobuf.size} B</td>
            <td className="border border-gray-300 px-6 py-4">
              {stats.json.size > stats.protobuf.size ? "Protobuf" : "JSON"}
            </td>
          </tr>
          <tr>
            <td className="border border-gray-300 px-4 py-2">Fetch Time (ms)</td>
            <td className="border border-gray-300 px-4 py-2">{stats.json.fetchTime.toFixed(2)} ms</td>
            <td className="border border-gray-300 px-4 py-2">{stats.protobuf.fetchTime.toFixed(2)} ms</td>
            <td className="border border-gray-300 px-4 py-2">
              {stats.json.fetchTime > stats.protobuf.fetchTime ? "Protobuf" : "JSON"}
            </td>
          </tr>
          <tr>
            <td className="border border-gray-300 px-4 py-2">Parse Time (ms)</td>
            <td className="border border-gray-300 px-4 py-2">{stats.json.parseTime.toFixed(2)} ms</td>
            <td className="border border-gray-300 px-4 py-2">{stats.protobuf.parseTime.toFixed(2)} ms</td>
            <td className="border border-gray-300 px-4 py-2">
              {stats.json.parseTime > stats.protobuf.parseTime ? "Protobuf" : "JSON"}
            </td>
          </tr>
        </tbody>
      </table>

      <div className="mt-6">
        <h2 className="text-xl font-semibold">Observations:</h2>
        <ul className="list-disc ml-6 mt-2">
          <li>
            Protobuf generally performs better in terms of size and fetch time
            because of its compact binary format.
          </li>
          <li>
            JSON is human-readable and easier to debug, but it incurs a
            performance penalty in size and parsing speed.
          </li>
        </ul>
      </div>
    </div>
  );
};

export default App;
//////////////////////////////////////////////////////////// USER.PROTO file ///////////////////////////////////////////////
syntax = "proto3";

message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip = 4;
}

message PhoneNumber {
  string type = 1;
  string number = 2;
}

message User {
  string id = 1;
  string name = 2;
  string email = 3;
  Address address = 4;
  repeated PhoneNumber phoneNumbers = 5;
}

message UserList {
  repeated User users = 1;
}
/////////////////////////////////////////////////////////// Text Compare ///////////////////////////////////////////////////
TextCompare.tsx
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState } from "react";
import { diffChars, diffWords, diffLines } from "diff";
import "./TextCompare.css";

const TextCompare: React.FC = () => {
  const [text1, setText1] = useState("");
  const [text2, setText2] = useState("");
  const [diffs, setDiffs] = useState<React.ReactNode[]>([]);
  const [compareType, setCompareType] = useState("line");

  const handleCompare = () => {
    let diffResult;
    switch (compareType) {
      case "char":
        diffResult = diffChars(text1, text2);
        break;
      case "word":
        diffResult = diffWords(text1, text2);
        break;
      case "line":
      default:
        diffResult = diffLines(text1, text2);
        break;
    }

    const diffElements = diffResult.map((part, index) => {
      const className = part.added
        ? "insert"
        : part.removed
        ? "delete"
        : "normal";
      return (
        <span key={index} className={className}>
          {part.value}
        </span>
      );
    });

    setDiffs(diffElements);
  };

  const handleClearAll = () => {
    setText1("");
    setText2("");
    setDiffs([]);
  };

  const handleSwitch = () => {
    const tempText = text1;
    setText1(text2);
    setText2(tempText);
  };

  return (
    <div className="container">
      <div className="textarea-container">
        <textarea
          className="textarea"
          value={text1}
          onChange={(e) => setText1(e.target.value)}
          placeholder="Enter first text here..."
        />
        <textarea
          className="textarea"
          value={text2}
          onChange={(e) => setText2(e.target.value)}
          placeholder="Enter second text here..."
        />
      </div>
      <div className="radio-container">
        <label>
          <input
            type="radio"
            value="char"
            checked={compareType === "char"}
            onChange={() => setCompareType("char")}
          />
          Char
        </label>
        <label>
          <input
            type="radio"
            value="word"
            checked={compareType === "word"}
            onChange={() => setCompareType("word")}
          />
          Word
        </label>
        <label>
          <input
            type="radio"
            value="line"
            checked={compareType === "line"}
            onChange={() => setCompareType("line")}
          />
          Line
        </label>
      </div>
      <div className="button-container">
        <button className="compare-button" onClick={handleCompare}>
          Compare
        </button>
        <button className="clear-button" onClick={handleClearAll}>
          Clear All
        </button>
        <button className="switch-button" onClick={handleSwitch}>
          Switch
        </button>
      </div>
      <div className="diff-view">{diffs}</div>
    </div>
  );
};

export default TextCompare;
/////////////////////////////////////////////////////////////// textCompare.css////////////////////////////////////////////////////////////////////////////
.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 20px;
  }
  
  .textarea-container {
    display: flex;
    justify-content: space-between;
    width: 100%;
    margin-bottom: 20px;
  }
  
  .textarea {
    width: 45%;
    height: 350px; /* Increased height for larger text */
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    overflow-y: auto; /* Make textarea scrollable */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for better visuals */
    margin-left: 5px;
  }
  
  .radio-container {
    display: flex;
    justify-content: center;
    margin: 10px 0;
  }
  
  .radio-container label {
    margin: 0 10px;
    font-size: 16px;
  }
  
  .button-container {
    display: flex;
    justify-content: center;
    margin: 20px 0;
  }
  
  .compare-button,
  .clear-button,
  .switch-button {
    padding: 10px 20px;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    margin: 0 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for buttons */
    transition: background-color 0.3s, box-shadow 0.3s; /* Smooth transitions */
  }
  
  .compare-button {
    background-color: #007bff;
  }
  
  .compare-button:hover {
    background-color: #0056b3;
    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2); /* Add hover effect */
  }
  
  .clear-button {
    background-color: #dc3545;
  }
  
  .clear-button:hover {
    background-color: #c82333;
    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2); /* Add hover effect */
  }
  
  .switch-button {
    background-color: #ffc107;
  }
  
  .switch-button:hover {
    background-color: #e0a800;
    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2); /* Add hover effect */
  }
  
  .diff-view {
    width: 80%;
    height: 300px; /* Make the diff view scrollable */
    margin-top: 20px;
    white-space: pre-wrap; /* Keep the formatting of spaces and new lines */
    overflow-y: auto; /* Make diff view scrollable */
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for better visuals */
    background-color: #f9f9f9; /* Light background for better readability */
  }
  
  .diff-view .insert {
    background-color: rgb(84, 212, 84);
    color: white;
  }
  
  .diff-view .delete {
    background-color: rgb(228, 67, 67);
    color: white;
  }
  
  .diff-view .normal {
    background-color: transparent;
    color: black;
  }
